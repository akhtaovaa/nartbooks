from fastapi import FastAPI, Depends, HTTPException, Header
from pydantic import BaseModel, EmailStr
from sqlalchemy import create_engine, Column, Integer, String, Text, Date
from sqlalchemy.orm import declarative_base, sessionmaker, Session
from typing import Optional, List
import smtplib
from email.mime.text import MIMEText
import os
import random
import string

# -----------------------------
# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
# -----------------------------
app = FastAPI(title="NartBooks API")

DATABASE_URL = "sqlite:///./nartbooks.db"
engine = create_engine(DATABASE_URL, connect_args={"check_same_thread": False})
Base = declarative_base()
SessionLocal = sessionmaker(bind=engine, autoflush=False, autocommit=False)

# -----------------------------
# –ú–æ–¥–µ–ª–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
# -----------------------------
class User(Base):
    __tablename__ = "users"

    id = Column(Integer, primary_key=True, index=True)
    first_name = Column(String, nullable=False)
    last_name = Column(String, nullable=False)
    email = Column(String, unique=True, index=True, nullable=False)
    phone = Column(String, nullable=True)
    birth_date = Column(String, nullable=True)
    fav_authors = Column(Text)
    fav_genres = Column(Text)
    fav_books = Column(Text)
    discuss_books = Column(Text)

class BookOfMonth(Base):
    __tablename__ = "books_of_month"

    id = Column(Integer, primary_key=True, index=True)
    title = Column(String, nullable=False)
    author = Column(String, nullable=False)
    date = Column(String, nullable=False)
    location = Column(String, nullable=False)

class AuthCode(Base):
    __tablename__ = "auth_codes"

    id = Column(Integer, primary_key=True, index=True)
    identifier = Column(String, nullable=False, index=True)  # email –∏–ª–∏ phone
    code = Column(String, nullable=False)
    created_at = Column(String, nullable=False)  # timestamp
    is_used = Column(Integer, default=0)  # 0 - –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω, 1 - –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω

Base.metadata.create_all(bind=engine)

# -----------------------------
# Pydantic-—Å—Ö–µ–º—ã (–≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö)
# -----------------------------
class UserCreate(BaseModel):
    first_name: str
    last_name: str
    email: EmailStr
    phone: Optional[str] = None
    birth_date: Optional[str] = None
    fav_authors: List[str]
    fav_genres: List[str]
    fav_books: List[str]
    discuss_books: List[str]

class BookCreate(BaseModel):
    title: str
    author: str
    date: str
    location: str

# -----------------------------
# –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
# -----------------------------
def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

# -----------------------------
# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
# -----------------------------
ADMIN_TOKEN = "my_secret_token"

def require_admin(x_admin_token: Optional[str] = Header(None)):
    if x_admin_token != ADMIN_TOKEN:
        raise HTTPException(status_code=401, detail="–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")

def generate_verification_code():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç 6-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    return ''.join(random.choices(string.digits, k=6))

def cleanup_old_codes(db: Session):
    """–£–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä—ã–µ –∫–æ–¥—ã (—Å—Ç–∞—Ä—à–µ 1 —á–∞—Å–∞)"""
    cutoff_time = datetime.now() - timedelta(hours=1)
    cutoff_str = cutoff_time.isoformat()
    
    old_codes = db.query(AuthCode).filter(AuthCode.created_at < cutoff_str).all()
    for code in old_codes:
        db.delete(code)
    db.commit()
    

# -----------------------------
# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ msg.ovrx.ru/api
# -----------------------------
import requests
from datetime import datetime, timedelta

MSG_OVRX_BASE_URL = "https://msg.ovrx.ru"
MSG_OVRX_API_KEY = "–¢–í–û–ô_API_–ö–õ–Æ–ß"  # ‚ö†Ô∏è —Å—é–¥–∞ –≤—Å—Ç–∞–≤—å —Ä–µ–∞–ª—å–Ω—ã–π API-–∫–ª—é—á

# –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞ (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ 1 –º–∏–Ω—É—Ç–∞)
last_sent = {}

class AuthRequest(BaseModel):
    email: Optional[EmailStr] = None
    phone: Optional[str] = None

class AuthVerify(BaseModel):
    email: Optional[EmailStr] = None
    phone: Optional[str] = None
    code: str

@app.post("/auth/send-code")
def send_auth_code(req: AuthRequest, db: Session = Depends(get_db)):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–≥–æ –∫–æ–¥–∞ (OTP)"""
    identifier = req.email or req.phone
    if not identifier:
        raise HTTPException(status_code=400, detail="–£–∫–∞–∂–∏—Ç–µ email –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω")

    # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∫–æ–¥—ã
    cleanup_old_codes(db)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
    if identifier in last_sent:
        if datetime.now() - last_sent[identifier] < timedelta(minutes=1):
            raise HTTPException(status_code=429, detail="–ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∫–æ–¥ –Ω–µ —á–∞—â–µ 1 —Ä–∞–∑–∞ –≤ –º–∏–Ω—É—Ç—É")

    code = generate_verification_code()

    # –ó–∞–ø—Ä–æ—Å –∫ msg.ovrx.ru
    payload = {"email": req.email, "code": code} if req.email else {"phone": req.phone, "code": code}

    try:
        r = requests.post(
            f"{MSG_OVRX_BASE_URL}/auth-code/email" if req.email else f"{MSG_OVRX_BASE_URL}/auth-code/sms",
            json=payload
        )
        r.raise_for_status()
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–¥–∞: {e}")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    auth_code = AuthCode(
        identifier=identifier,
        code=code,
        created_at=datetime.now().isoformat(),
        is_used=0
    )
    db.add(auth_code)
    db.commit()

    last_sent[identifier] = datetime.now()
    return {"message": "–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ"}

@app.post("/auth/verify-code")
def verify_auth_code(req: AuthVerify, db: Session = Depends(get_db)):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω –Ω–æ–≤—ã–π"""
    identifier = req.email or req.phone
    if not identifier:
        raise HTTPException(status_code=400, detail="–£–∫–∞–∂–∏—Ç–µ email –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω")

    # –ò—â–µ–º –Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞
    auth_code = db.query(AuthCode).filter(
        AuthCode.identifier == identifier,
        AuthCode.code == req.code,
        AuthCode.is_used == 0
    ).first()

    if not auth_code:
        raise HTTPException(status_code=400, detail="–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –∏–ª–∏ –∫–æ–¥ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫ –ª–∏ –∫–æ–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10 –º–∏–Ω—É—Ç)
    code_created = datetime.fromisoformat(auth_code.created_at)
    if datetime.now() - code_created > timedelta(minutes=10):
        raise HTTPException(status_code=400, detail="–ö–æ–¥ –∏—Å—Ç–µ–∫")

    # –ü–æ–º–µ—á–∞–µ–º –∫–æ–¥ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π
    auth_code.is_used = 1
    db.commit()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
    user = db.query(User).filter(
        (User.email == req.email) | (User.phone == req.phone)
    ).first()

    if not user:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        user = User(
            first_name="",
            last_name="",
            email=req.email or "",
            phone=req.phone or "",
            fav_authors="",
            fav_genres="",
            fav_books="",
            discuss_books=""
        )
        db.add(user)
        db.commit()
        db.refresh(user)

    return {"message": "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞", "user_id": user.id}

# -----------------------------
# –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã API
# -----------------------------
@app.get("/")
def home():
    return {"message": "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ NartBooks!"}

@app.post("/register")
def register_user(data: UserCreate, db: Session = Depends(get_db)):
    if db.query(User).filter(User.email == data.email).first():
        raise HTTPException(status_code=400, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

    user = User(
        first_name=data.first_name,
        last_name=data.last_name,
        email=data.email,
        phone=data.phone,
        birth_date=data.birth_date,
        fav_authors=", ".join(data.fav_authors),
        fav_genres=", ".join(data.fav_genres),
        fav_books=", ".join(data.fav_books),
        discuss_books=", ".join(data.discuss_books)
    )
    db.add(user)
    db.commit()
    db.refresh(user)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ –ø–∏—Å—å–º–æ
    # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é send_email
    # send_email(
    #     to_email=data.email,
    #     subject="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ NartBooks!",
    #     body=f"–ü—Ä–∏–≤–µ—Ç, {data.first_name}! üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–Ω–∏–∂–Ω—ã–π –∫–ª—É–± NartBooks!"
    # )

    return {"message": "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!", "user_id": user.id}

@app.post("/admin/add_book")
def add_book(book: BookCreate, db: Session = Depends(get_db), _: None = Depends(require_admin)):
    book_entry = BookOfMonth(**book.dict())
    db.add(book_entry)
    db.commit()
    return {"message": "–ö–Ω–∏–≥–∞ –º–µ—Å—è—Ü–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞"}

@app.get("/book_of_month")
def get_book_of_month(db: Session = Depends(get_db)):
    book = db.query(BookOfMonth).order_by(BookOfMonth.id.desc()).first()
    if not book:
        raise HTTPException(status_code=404, detail="–ö–Ω–∏–≥–∞ –º–µ—Å—è—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    return {
        "title": book.title,
        "author": book.author,
        "date": book.date,
        "location": book.location
    }
